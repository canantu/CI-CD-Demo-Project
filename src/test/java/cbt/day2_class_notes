Today is October 21, 2021


Agenda:
   CI/CD
    - recap
    - smoke and regression jobs
    - pipeline script

   Selenium Grid
    - docker
    - what is hub and node
    - selenium grid with Jenkins

################################


Jenkins job - it's a task to build something.

Test execution, is part of build process.

Build starts with compilation of source code and ends with a deployment.

For test execution, we just need to do all steps until test.

Q: How to make my java/maven project execute tests in Jenkins?

        A: First of all, add maven-surefire or maven-failsafe plugin.

        pom.xml


            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <testFailureIgnore>true</testFailureIgnore>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>

        <include> has to match test class name.

        use * (wildcard) to match and character.

        e.g. *CukesRunner.java will match 1CukesRunner.java, 2CukesRunner.java, etc...


        <include>**/*Test.java</include> - any test class that includes Test in the name will be picked up
        by maven-surefire plugin during test execution phase.


        Any class with @RunWith(Cucumber.class) considered as a test class as well. It's just a custom test class.
        Traditional (conventional) test looks like method with a @Test annotation:


        @Test
        public void test() {
            Assert.assertEquals("apple", getString());
        }

Q: How to create a Jenkins job?


        - Usually we use freestyle project or pipeline script.

        - For freestyle project:

            1. Provide github URL of the project
            2. Setup schedule (H 5 * * * means every morning at 5:00 am (optional))
                 H - allows jenkins to distribute load evenly. Let's say there 5 job execution scheduled at 5am.
                 To improve performance, we can say that execute those 5 jobs around 5:00 am as per convenience.

                 But if we are strict in terms of time, specify some minutes instead of H:

                 0 5 * * *

                 means strictly at 5:00 am

            3. Build -> Invoke top level maven targets -> test
            4. Post Build --> cucumber reports


Q: How do you create a smoke test job? How do you label your tests? How do you know which test belongs to smoke test?

    I use cucumber tags: @smoke


Q: How do I use this tag in maven command for test execution? Because Runner class can be overridden.

    mvn test -Dcucumber.filter.tags="@smoke"


    -D - used to specify some parameters

    cucumber.filter.tags - used to override tags specifications in Test runner class.

    specify in command line        read in java code
    -DBROWSER=chrome --> System.getProperty("BROWSER") -- chrome

    specify in command line        read in java code
    -Denvironment=qa --> System.getProperty("environment") -- qa


Q: we have configuration.properties file, so why we need to specify some parameters with -D ?

Following question: how to use same project for execution on different browser at the same time?

How you can run smoke test on different environment at the same time?


A: I can parametrize test execution command.

If I want to specify environment parameter with maven command, I use -D, e.g. -Denvironment=qa, then I can read it in java code by using System.getProperty()--> System.getProperty("environment").


Q: How do I run smoke tests on chrome and firefox at the same time in Jenkins?

A: I create 2 jobs (chrome-smoke-test, firefox-smoke-test). All steps are the same except maven command:


for chrome: test -DBROWSER="chrome"

for firefox: test -DBROWSER="firefox"

and I schedule both jobs to execute at 5am (if needed).

Driver class example for parameterizing browser type with maven command:


    public static WebDriver getDriver() {
        if (driver == null) {
            if (System.getProperty("BROWSER") == null) {
                browser = ConfigurationReader.getProperty("browser");
            } else {
                browser = System.getProperty("BROWSER");
            }

Q: How to start Jenkins job manually?
A: Click build now.


Q: How to change environment withing maven command for test execution?

          if (environment != null) {
            switch (environment) {
                case "qa":
                    Driver.getDriver().get("http://qa1.vytrack.com");
                    break;
                case "dev":
                    Driver.getDriver().get("http://dev.vytrack.com");
                    break;
                case "stage":
                    Driver.getDriver().get("http://stage.vytrack.com");
                    break;
            }
        } else {
            String url = ConfigurationReader.getProperty("environment");
            Driver.getDriver().get(url);
        }
Q: How you run smoke tests on different environments at the same time?
A: I create multiple jenkins jobs, and in every job I specify environment parameter as part of maven command to target different environments for tests execution.

1st job
    test -Denvironment="qa"

2nd job
    test -Denvironment="stage"

3rd job
    test -Denvironment="dev"

Q: What Is the difference between System.getProperty and ConfigReader.get property?

ConfigReader --> reads only your properties file, wheres System class reads system properties.

https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html

Q: Can we use 2 or more parameters at the same time?

A: Yes

test -Denvironment="qa" -Dbrowser="chrome" -DclassName=TestRunner23

#Create smoke test job

1. Go to Jenkins dashboard
2. New item
3. name --> smoke-test
   type --> freestyle project

4. Job steps:

    - SCM
        git --> https://github.com/vasyafomiuk/demo-project.git

    - Build
       Invoke top-level maven targets
         test -Dcucumber.filter.tags="@smoke"

    - Post build
       Cucumber reports

      apply&save

      Build now!

To use multiple tags:

test -Dcucumber.filter.tags="@smoke or @sanity"


#Create regression test suite job

1. Go to Jenkins dashboard
2. New item
3. name --> regression-test-suite
   type --> freestyle project

4. Job steps:

    - SCM
        git --> https://github.com/vasyafomiuk/demo-project.git

    - Build
       Invoke top-level maven targets
         test -Dcucumber.filter.tags="@regression"

(NOTE: make sure that test scenarios are annotated in your framework before using this tag.)

    - Post build
       Cucumber reports

      apply&save

      Build now!


String testSuite = {"Test1", "Test2"};

 to target scenarios have either or tags use 'or'.

     test -Dcucumber.filter.tags="@regression or @sanity"

 to target scenarios have both tags use 'and'.

     test -Dcucumber.filter.tags="@regression and @user_profile"

 @regression @user_profile
 Scenario: Change user profile picture


Jenkins Pipeline (or simply "Pipeline" with a capital "P") is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins

Jenkins Pipeline - it's a job written with a DSL (jenkins domain specific language based on Groovy (Groovy is based on Java))


Jenkins Pipeline is mostly used for creating production pipelines, but we can use it to create jobs for testing as well. Since scripting gives more freedom (we create variables, put if/else conditions, put try/catch block, execute tasks in parallel) sometimes it's a good idea to use pipeline script for test automation jobs.

node {
    stage('Clone code') {
        git 'https://github.com/vasyafomiuk/demo-project.git'
    }

    stage('Run tests'){
        if(isUnix()){
            sh "mvn clean test"
        } else {
            bat "mvn clean test"
        }
    }

    stage('Generate report'){
           cucumber failedFeaturesNumber: -1, failedScenariosNumber: -1, failedStepsNumber: -1, fileIncludePattern: '**/*.json', pendingStepsNumber: -1, skippedStepsNumber: -1, sortingMethod: 'ALPHABETICAL', undefinedStepsNumber: -1
    }
}

node - worker that executes some program.

Jenkins also supports declarative pipeline (starts with pipeline not node in the beginning), but we don't need it for our example.


Pipeline consists of stages

Stage can have steps

1. pull code
2. run tests
3. generate report


*********************************************************

- advantages of jenkins: we use our laptop for test execution at the same time continue to work

    - call code from github
    - build the code
    - execute the code on remote

    mvn test  -- command from console
    if you have a maven project, you can use one command to run the tests
    lifecycle-test
    maven-surefire-plugin support to execute tests, we provide runner class. without this plugin jenkins would not work.
